generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  name     String
  email    String @unique
  password String

  company  Company?
  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Company {
  id String @id @default(cuid())

  name            String
  email           String?
  phone           String?
  address         String?
  logo            String?
  website         String?
  defaultCurrency String  @default("USD")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model Client {
  id String @id @default(cuid())

  name    String
  email   String?
  phone   String?
  address String?

  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model Invoice {
  id String @id @default(cuid())

  number    String        @unique
  issueDate DateTime
  dueDate   DateTime
  status    InvoiceStatus @default(DRAFT)
  subtotal  Decimal       @db.Decimal(10, 2)
  taxRate   Decimal       @default(0) @db.Decimal(5, 2)
  taxAmount Decimal       @default(0) @db.Decimal(10, 2)
  total     Decimal       @db.Decimal(10, 2)
  currency  String        @default("USD")
  notes     String?
  theme     String        @default("modern-minimalist")

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId  String
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  items InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model InvoiceItem {
  id String @id @default(cuid())

  description String
  quantity    Decimal @db.Decimal(10, 2)
  unitPrice   Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoice_items")
}
